define dso_local i32 @main() {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %i.0 = phi i64 [ 0, %entry ], [ %inc, %for.body ]
  %sum.0 = phi i64 [ 0, %entry ], [ %add, %for.body ]
  %cmp = icmp ult i64 %i.0, 20
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %mul = mul i64 %i.0, %i.0
  %add = add i64 %sum.0, %mul
  %inc = add i64 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %sum.0.lcssa = phi i64 [ %sum.0, %for.cond ]
  call void @write(i64 noundef %sum.0.lcssa)
  ret i32 0

for.body.vec:                                     ; No predecessors!
  %mul.vec0 = mul i64 %i.0, %i.0
  %inc.vec0 = add i64 %i.0, 1
  %mul.vec1 = mul i64 %inc.vec0, %inc.vec0
  %inc.vec1 = add i64 %inc.vec0, 1
  %mul.vec2 = mul i64 %inc.vec1, %inc.vec1
  %inc.vec2 = add i64 %inc.vec1, 1
  %mul.vec3 = mul i64 %inc.vec2, %inc.vec2
  %inc.vec3 = add i64 %inc.vec2, 1
  %mul.vec4 = mul i64 %inc.vec3, %inc.vec3
  %inc.vec4 = add i64 %inc.vec3, 1
  %mul.vec5 = mul i64 %inc.vec4, %inc.vec4
  %inc.vec5 = add i64 %inc.vec4, 1
  %mul.vec6 = mul i64 %inc.vec5, %inc.vec5
  %inc.vec6 = add i64 %inc.vec5, 1
  %0 = call i64 @int_sum_i64(i64 %sum.0, i64 %mul.vec0, i64 %mul.vec1, i64 %mul.vec2, i64 %mul.vec3, i64 %mul.vec4, i64 %mul.vec5, i64 %mul.vec6)
  br label %entry
}

declare void @write(i64 noundef)

declare i64 @int_sum_i64(i64, i64, i64, i64, i64, i64, i64, i64)
